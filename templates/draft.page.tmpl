{{template "base" .}}

{{define "content"}}

<title>Draft | Baltijas Kauss</title>

<div class="container bg-light rounded-3 border p-4" style="user-select: none;">
  <div class="row">
    <div class="col-md-9">
      <table class="table table-sm table-responsive table-borderless">
        <thead style="font-size: 14px; text-align: center;">
            <tr>
                <th></th>
                <th class="ps-2 pointer" style="text-align: start;">NAME</th>
                <th title="Overall Rating" data-bs-toggle="tooltip">OVR</th>
                <th title="Three Point Shot" data-bs-toggle="tooltip">3PT</th>
                <th title="Driving Dunk" data-bs-toggle="tooltip">DUNK</th>
                <th title="Athleticism" data-bs-toggle="tooltip">ATHL</th>
                <th title="Perimeter Defense" data-bs-toggle="tooltip">PER D</th>
                <th title="Interior Defense" data-bs-toggle="tooltip">INT D</th>
                <th title="Rebounding" data-bs-toggle="tooltip">REB</th>
                <th title="Badges" data-bs-toggle="tooltip">BADGES</th>
                <th title="Total Attributes" data-bs-toggle="tooltip">TOTAL</th>
            </tr>
        </thead>
        <tbody style="white-space: nowrap; text-align: center; vertical-align: middle;">
            <tr style="border-top: 0.5px solid rgb(190, 190, 190);">
                <td class="p-0 py-1">
                    <img id="player-img" src="/static/images/players/default_player.png" alt="" class="header-image rounded-circle inline-block border">
                </td>
                <td class="p-0 ps-2">
                    <div class="d-flex player-card">
                        <div class="p-0 inline-block">
                            <p class="m-0"><a id="name" class="player-link" href="#" target="_blank">Kareem Ajabbari</a></p>
                            <div class="my-0">
                                <p id="player-info" class="text-muted my-0" style="font-size: 12px;">
                                    PF/C | 240cm | 130kg
                                </p>
                            </div>
                        </div>
                    </div>
                </td>
                <td><span id="overall" class="overall-badge overall5">00</span></td>
                <td id="three-point">25</td>
                <td id="driving-dunk">88</td>
                <td id="athleticism">91</td>
                <td id="perimeter-d">67</td>
                <td id="interior-d">93</td>
                <td id="rebounding">96</td>
                <td>
                    <span id="bronze-badges" class="playerbadge badge badge-pill p-1 bronze">7</span>
                    <span id="silver-badges" class="playerbadge badge badge-pill p-1 silver">4</span>
                    <span id="gold-badges" class="playerbadge badge badge-pill p-1 gold">2</span>
                    <span id="hof-badges" class="playerbadge badge badge-pill p-1 hof">0</span>
                    <span id="total-badges" class="playerbadge badge badge-pill p-1 total">13</span>
                </td>
                <td>
                    <span id="total-attributes" class="playerbadge badge badge-pill p-1 text-dark bg-light border" style="background-color: rgb(237, 237, 237); width: 50px;">2832</span>
                </td>
            </tr>
        </tbody>
      </table>
      <div class="progress mb-3" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="height: 10px">
        <div id="countdown-bar" class="progress-bar bkcolor" style="width: 100%"></div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="row">
        <div class="col-md-4 d-flex justify-content-center align-items-center">
          <p id="countdown" class="m-0" style="font-size: 60px; font-family: sans-serif;">00</p>
        </div>
        <div class="col-md-8 pt-3 ps-0">
          <p class="m-0" style="font-size: 10px;">Pick <span id="pickNumber">1</span></p>
          <p class="m-0" style="font-size: 10px;">Round <span id="roundNumber">1</span></p>
          <p id="activeTeam" class="m-0" style="font-size: 18px;"></p>
        </div>
      </div>
      <p id="player-id" class="hidden"></p>
      <button class="btn btn-primary" style="width: 100%;" onclick="draftPlayer()">Draft</button>
    </div>
  </div>
  <hr class="mt-2 mb-3">
  <div class="row">
    <div class="col-md-9">
      <table id="draft-table" class="table table-condensed table-borderless table-responsive rounded rounded-3 overflow-hidden">
        <thead style="text-align: center;">
            <tr style="border: 0.1px solid rgb(190, 190, 190);">
                <th style="font-size: 12px; width: 5%"></th>
                {{ range $pick := seq 1 (len $.Data.teams) }}
                  <th id="pick{{$pick}}" style="font-size: 12px; border: 0.1px solid rgb(190, 190, 190); width: 23.75%;">Pick {{$pick}}</th>
                {{ end }}
            </tr>
        </thead>
        <tbody style="white-space: nowrap; text-align: center; vertical-align: middle;">
          {{ range $row := seq 1 12 }}
            <tr style="border: 0.1px solid rgb(190, 190, 190); font-size: 12px;">
              <td>
                {{ $row }}
              </td>
              {{ range $col := seq 1 (len $.Data.teams) }}
              <td class="p-0" style="font-size: 14px; border-left: 0.1px solid rgb(190, 190, 190);">
                <div id="row{{$row}}col{{$col}}" class="py-1">
                  <br>
                  <br>
                </div>
              </td>
              {{ end }}
            </tr>
          {{ end }}
        </tbody>
      </table>
    </div>
    <div class="col-md-3">
      <input id="search" class="form-control mb-2" type="text" name="search" autocomplete="off" placeholder="Search...">
      <ul id="draft-players-list" class="list-group">
        {{range $index, $player := index .Data "players"}}
          {{ if eq $player.TeamID 1 }}
            <li id="draft-players-list-{{$player.PlayerID}}" class="list-group-item py-1 px-3" onclick="viewPlayer({{$player}})">
              <div class="d-flex justify-content-between align-items-center pointer">
                <p class="m-0"><span class="overall-text me-2" overall-color="{{$player.Overall}}">{{$player.Overall}}</span> {{$player.FirstName}} {{$player.LastName}}</p><span id="star-{{$player.PlayerID}}" style="color: #E6E6E6; font-size: 18px;" onclick="toggleStar('{{$player.PlayerID}}')">â˜†</span>
              </div>
            </li>
          {{ end }}
        {{end}}
      </ul>
      <div class="d-flex justify-content-between" style="padding-top: 6px;">
        <div>
          <img class="pointer me-3" src="/static/images/buttons/volume-on.png" alt="" style="max-height: 20px; opacity: 45%;">
          {{if eq .User.AccessLevel 2}}
            <img class="pointer" src="/static/images/buttons/settings.png" alt="" style="max-height: 18px; opacity: 45%;" onclick="draftSettings();">
          {{end}}
        </div>
        <div id="status"></div>
      </div>
    </div>
  </div>
  <div class="row px-3">
    <div id="draft-buttons" class="col-md-9 my-3">
      <div class="d-flex flex-row justify-content-between">
          <div id="resetPlayersBtn" class="btn btn-warning" onclick="resetAllPlayers();">Reset All Teams</div>
          <div>
            <select id="timeLimit" class="form-select">
              <option value="1">Random</option>
              <option value="15">15</option>
              <option value="30">30</option>
              <option selected value="45">45</option>
              <option value="60">60</option>
            </select>
          </div>
          <div id="generateOrderBtn" class="btn btn-success" onclick="generateOrder();">Generate Draft Order</div>
          <div id="startDraftBtn" class="btn btn-primary" onclick="startDraft();">Start Draft</div>
          <div id="pauseDraftBtn" class="btn btn-info" onclick="pauseDraft();">Pause</div>
          <div id="stopDraftBtn" class="btn btn-danger" onclick="stopDraft();">Stop Draft</div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-9">
  
      <div class="form-group hidden">
        <label for="username">Username:</label>
        <input type="text" name="username" id="username" class="form-control" autocomplete="off" value="{{.User.FirstName}}">
      </div>

      <input type="hidden" name="action" id="action">

      <div id="output" class="form-control" style="min-height: 160px; max-height: 160px; overflow:scroll; scrollbar-width: none;">

      </div>

      <div class="form-group mt-2">
        <input type="text" name="message" id="message" class="form-control" autocomplete="off">
      </div>

    </div>
    <div class="col-md-3">
      <h5>Online</h5>
      <ul id="online_users" style="padding-left: 1em; font-size: 16px;">
        
      </ul>
    </div>
  </div>

</div>
{{end}}

{{define "js"}}

<!-- Messenger WS -->
<script>
  let messengerSocket = null
  let userField = document.getElementById("username")
  let messengerField = document.getElementById("message")
  let messengerOutput = document.getElementById("output")

  window.onbeforeunload = function() {
    let jsonData = {}
    jsonData["action"] = "left"
    messengerSocket.send(JSON.stringify(jsonData))
  }

  document.addEventListener("DOMContentLoaded", function() {
    messengerSocket = new ReconnectingWebSocket("ws://" + document.location.host + "/messengerws", null, {debug: true, reconnectInterval: 3000})

    messengerSocket.onopen = () => {
      let jsonData = {}
      jsonData["action"] = "username"
      jsonData["username"] = userField.value
      messengerSocket.send(JSON.stringify(jsonData))
    }

    messengerSocket.onclose = () => {
      console.log('messengerSocket closed')
      // do something
    }

    messengerSocket.onerror = error => {
      console.log('messengerSocket error')
      // do something
    }

    messengerSocket.onmessage = msg => {
      let data = JSON.parse(msg.data);
      console.log("Action is", data.action)

      switch (data.action) {
        case "list_users":
          let ul = document.getElementById("online_users")
          while (ul.firstChild) ul.removeChild(ul.firstChild)

          if (data.connected_users.length > 0) {
            data.connected_users.forEach(function(item) {
              let li = document.createElement("li")
              li.appendChild(document.createTextNode(item))
              ul.appendChild(li)
            })
          }
          break

        case "broadcast":
          messengerOutput.innerHTML = messengerOutput.innerHTML + data.message + "<br>"
          scrollToBottom()
          break
      }
    }

    userField.addEventListener("change", function () {
          let jsonData = {}
          jsonData["action"] = "username"
          jsonData["username"] = this.value
          messengerSocket.send(JSON.stringify(jsonData))
      })

    messengerField.addEventListener("keydown", function(event) {
      if (event.key === "Enter") {
        if (!messengerSocket) {
          console.log("No connection")
          return false
        }

        if ((userField.value === "") || (messengerField.value === "")) {
          return false
        } else {
          sendMessage()
        }

        event.preventDefault()
        event.stopPropagation()
      }
    })

  })

  function sendMessage() {
    let jsonData = {}
    jsonData["action"] = "broadcast"
    jsonData["username"] = userField.value
    jsonData["message"] = messengerField.value
    messengerSocket.send(JSON.stringify(jsonData))
    messengerField.value = ""
  }

  function scrollToBottom() {
    messengerOutput.scrollTop = messengerOutput.scrollHeight
  }

</script>

<!-- Draft WS -->
<script>
  let draftSocket = null
  const countdown = document.getElementById("countdown")
  const pickNumber = document.getElementById("pickNumber")
  const activeTeam = document.getElementById("activeTeam")
  const roundNumber = document.getElementById("roundNumber")

  document.addEventListener("DOMContentLoaded", function() {
    draftSocket = new ReconnectingWebSocket("ws://" + document.location.host + "/draftws", null, {debug: true, reconnectInterval: 3000})

    const online = `<span class="badge bg-success">Draft connected</span>`
    const offline = `<span class="badge bg-danger">Draft disconnected</span>`
    let statusDiv = document.getElementById("status")

    draftSocket.onopen = () => {
      statusDiv.innerHTML = online
    }

    draftSocket.onclose = () => {
      statusDiv.innerHTML = offline
    }

    draftSocket.onerror = error => {
      statusDiv.innerHTML = offline
    }

    draftSocket.onmessage = msg => {
      let data = JSON.parse(msg.data)
      if (data.draft_picks) {
        console.log('ADDING PICKS')
        data.draft_picks.forEach(element => {
          if (element.Name) {
            document.getElementById("row" + element.Row + "col" + element.Col).innerHTML = "<span class=\"fw-semibold\">" + element.Name + "</span><br>" + element.Positions
          }
          if (element.Row === 1) {
              document.getElementById("pick" + element.Col).innerHTML = element.TeamName.toUpperCase()
            }
        })
      }
      switch (data.action) {
        case "reset_players":
          for (let row = 1; row <= 12; row++) {
            for (let col = 1; col <= 4; col++) {
              document.getElementById("row" + row + "col" + col).innerHTML = "<br><br>"
            }
          }
          break

        case "countdown":
          (data.countdown < 10) ? countdown.innerHTML = '0' + data.countdown : countdown.innerHTML = data.countdown
          document.getElementById("countdown-bar").style.width = (data.countdown/data.time_limit)*100 + "%"
          break

        case "generate_order":
          for (let i = 0; i < data.teams.length; i++) {
            document.getElementById("pick" + (i+1)).innerHTML = data.teams[i].Name.toUpperCase()
            // document.getElementById("pick" + (i+1)).style.backgroundImage = 'linear-gradient(90deg,' + data.teams[i].Color1 + ', ' + data.teams[i].Color2 +  ')'
            // document.getElementById("pick" + (i+1)).style.color = data.teams[i].TextColor
          } 
          break;
        
        case "draft_player":
          if (data.team_name) {
            pickNumber.textContent = data.pick
            roundNumber.textContent = data.next_row
            activeTeam.textContent = data.team_name
            const next = document.getElementById("row" + data.next_row + "col" + data.next_col)
            next.style.color = 'white'
            next.classList.add('bkcolor')
            next.innerHTML = `PICK ${data.pick}<br>${data.team_name}</span>`
          }
          document.getElementById("draft-players-list-" + data.player_id).outerHTML = ''
          const current = document.getElementById("row" + data.row + "col" + data.col)
          current.innerHTML = data.message
          current.style.color = 'black'
          current.classList.remove('bkcolor')
          break

        case "start":
          const firstPick = document.getElementById("row1col1")
          firstPick.style.color = 'white'
          firstPick.classList.add('bkcolor')
          activeTeam.textContent = data.team_name
          firstPick.innerHTML = `PICK 1<br>${data.team_name}</span>`
          break  

        case "draft_ended":
          countdown.innerHTML = "<br>"
          pick = 1
          document.getElementById("countdown_bar").style.width = "100%"
          break
        }
    }
  })

  function generateOrder() {
    let jsonData = {}
    jsonData["action"] = "generate_order"
    draftSocket.send(JSON.stringify(jsonData))
  }

  function startDraft() {
    let jsonData = {}
    jsonData["action"] = "start"
    jsonData["time_limit"] = parseInt(document.getElementById("timeLimit").value)
    draftSocket.send(JSON.stringify(jsonData))
  }

  function pauseDraft() {
    let jsonData = {}
    jsonData["action"] = "pause"
    const pauseBtn = document.getElementById("pauseDraftBtn")
    if (pauseBtn.innerText === 'Pause') {
      pauseBtn.innerText = 'Resume'
    } else {
      pauseBtn.innerText = 'Pause'
    }
    draftSocket.send(JSON.stringify(jsonData))
  }

  function stopDraft() {
    let jsonData = {}
    jsonData["action"] = "stop"
    draftSocket.send(JSON.stringify(jsonData))
  }

  function setCountdown() {
    let jsonData = {}
    jsonData["action"] = "set_countdown"
    jsonData["time_limit"] = parseInt(document.getElementById("timeLimit").value)
    draftSocket.send(JSON.stringify(jsonData))
  }

  function draftPlayer() {
    let name = document.getElementById('name').innerText
    let player_id = document.getElementById('player-id').innerText
    let positions = document.getElementById('player-info').innerText
    positions = positions.substring(0, positions.indexOf(' '))

    let jsonData = {}
    jsonData["action"] = "draft_player"
    jsonData["player_id"] = parseInt(player_id)
    jsonData["player_info"] = [name, positions]
    draftSocket.send(JSON.stringify(jsonData))
  }

  function resetAllPlayers() {
    let jsonData = {}
    jsonData["action"] = "reset_players"
    draftSocket.send(JSON.stringify(jsonData))
  }

  function draftSettings() {
    $('#draft-buttons').toggleClass("hidden")
  }

  function toggleStar(id) {
    const star = document.getElementById('star-' + id)
    if (star.style.color === 'rgb(230, 230, 230)') {
      star.style.color = '#E600FF';
    } else {
      star.style.color = '#E6E6E6';
    }
    event.stopPropagation()
  }

</script>

<script>
  function viewPlayer(player) {
    let img = (player.img_url) ? player.img_url : '/static/images/players/default_player.png'
    let playerInfo = `${player.primary_position}${player.secondary_position ? '/' + player.secondary_position : ''}${player.height ? ` | ${player.height}cm` : ''}${player.weight ? ` | ${player.weight}kg` : ''}`;
    document.getElementById('player-id').innerText = player.player_id
    document.getElementById('name').innerText = player.first_name + ' ' + player.last_name
    document.getElementById('name').href = '/players/' + player.player_id
    document.getElementById('player-info').innerText = playerInfo
    document.getElementById('player-img').src = img
    let color
    let colorRange = {
      '91-99' :'overall1',
      '86-90' :'overall2',
      '81-85' :'overall3',
      '1-80'  :'overall4',
      '0-0'   :'overall5',
    }
    for (const range in colorRange) {
      const [min, max] = range.split('-').map(Number);

      if (player.overall >= min && player.overall <= max) {
        color = colorRange[range]
        break
      }
    }
    document.getElementById('overall').innerText = player.overall
    document.getElementById('overall').className = 'overall-badge ' + color
    document.getElementById('three-point').innerText = player.attributes.ThreePointShot
    document.getElementById('driving-dunk').innerText = player.attributes.DrivingDunk
    document.getElementById('athleticism').innerText = player.attributes.Athleticism
    document.getElementById('interior-d').innerText = player.attributes.InteriorDefense
    document.getElementById('perimeter-d').innerText = player.attributes.PerimeterDefense
    document.getElementById('rebounding').innerText = player.attributes.Rebounding
    document.getElementById('bronze-badges').innerText = player.bronze_badges
    document.getElementById('silver-badges').innerText = player.silver_badges
    document.getElementById('gold-badges').innerText = player.gold_badges
    document.getElementById('hof-badges').innerText = player.hof_badges
    document.getElementById('total-badges').innerText = player.total_badges
    document.getElementById('total-attributes').innerText = player.attributes.TotalAttributes
  }
</script>

<script>
  $(document).ready(function(){
  let colorRange = {
      '91-99' :'overall1-text',
      '86-90' :'overall2-text',
      '81-85' :'overall3-text',
      '1-80'  :'overall4-text',
      '0-0'   :'overall5-text',
  };
  
  function between(value, min, max) {
      return value >= min && value <= max
  }
  
  let color
  let first;
  let second
  let overall
  
  $('.overall-text').each(function(index){
      
      overall = $(this)
      color = parseInt($(this).attr('overall-color'),10)
      
      $.each(colorRange, function(name, value){
          
          first = parseInt(name.split('-')[0],10)
          second = parseInt(name.split('-')[1],10)
          
          if( between(color, first, second) ){
              overall.addClass(value)
          }
      
      });
      
  });
  });
</script>

<!-- Search -->
<script>
  $(document).ready(function() {
    $("#search").on("keyup", function() {
      let value = $(this).val().toLowerCase()
      $("#draft-players-list li").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      })
    })
  })
</script>
{{end}}