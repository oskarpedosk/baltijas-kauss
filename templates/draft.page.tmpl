{{template "base" .}}

{{define "content"}}

<title>Draft | Baltijas Kauss</title>

<div class="container bg-light rounded-3 border p-4" style="user-select: none;">
  <div class="row">
    <div class="col-md-9">
      <table class="table table-sm table-responsive table-borderless">
        <thead style="font-size: 14px; text-align: center;">
            <tr>
                <th></th>
                <th class="ps-2 pointer" style="text-align: start;">NAME</th>
                <th title="Overall Rating" data-bs-toggle="tooltip">OVR</th>
                <th title="Three Point Shot" data-bs-toggle="tooltip">3PT</th>
                <th title="Driving Dunk" data-bs-toggle="tooltip">DUNK</th>
                <th title="Athleticism" data-bs-toggle="tooltip">ATHL</th>
                <th title="Perimeter Defense" data-bs-toggle="tooltip">PER D</th>
                <th title="Interior Defense" data-bs-toggle="tooltip">INT D</th>
                <th title="Rebounding" data-bs-toggle="tooltip">REB</th>
                <th title="Badges" data-bs-toggle="tooltip">BADGES</th>
                <th title="Total Attributes" data-bs-toggle="tooltip">TOTAL</th>
            </tr>
        </thead>
        <tbody style="white-space: nowrap; text-align: center; vertical-align: middle;">
            <tr style="border-top: 0.5px solid rgb(190, 190, 190);">
                <td class="p-0 py-1">
                    <img id="player-img" src="/static/images/players/default_player.png" alt="" class="header-image rounded-circle inline-block border">
                </td>
                <td class="p-0 ps-2">
                    <div class="d-flex player-card">
                        <div class="p-0 inline-block">
                            <p class="m-0"><a id="name" class="player-link" href="#" target="_blank">Kareem Ajabbari</a></p>
                            <div class="my-0">
                                <p id="player-info" class="text-muted my-0" style="font-size: 12px;">
                                    PF/C | 240cm | 130kg
                                </p>
                            </div>
                        </div>
                    </div>
                </td>
                <td><span id="overall" class="overall-badge" overall-color="0">83</span></td>
                <td id="three-point">25</td>
                <td id="driving-dunk">88</td>
                <td id="athleticism">91</td>
                <td id="perimeter-d">67</td>
                <td id="interior-d">93</td>
                <td id="rebounding">96</td>
                <td>
                    <span id="bronze-badges" class="playerbadge badge badge-pill p-1 bronze">7</span>
                    <span id="silver-badges" class="playerbadge badge badge-pill p-1 silver">4</span>
                    <span id="gold-badges" class="playerbadge badge badge-pill p-1 gold">2</span>
                    <span id="hof-badges" class="playerbadge badge badge-pill p-1 hof">0</span>
                    <span id="total-badges" class="playerbadge badge badge-pill p-1 total">13</span>
                </td>
                <td>
                    <span id="total-attributes" class="playerbadge badge badge-pill p-1 text-dark bg-light border" style="background-color: rgb(237, 237, 237); width: 50px;">2832</span>
                </td>
            </tr>
        </tbody>
      </table>
      <div class="progress mb-3" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 10px">
        <div class="progress-bar bkcolor" style="width: 25%"></div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="d-flex">
        <p class="text-center m-0 p-0" id="countdown" style="font-size: 50px;">00</p>
        <div>
          <p class="m-0" style="font-size: 10px;">Round 1</p>
          <p class="m-0" style="font-size: 10px;">Pick 3</p>
          <p class="m-0" style="font-size: 20px;">Ametiühing Keskus</p>
        </div>
      </div>
      <p id="player-id" class="hidden"></p>
      <button class="btn btn-primary" style="width: 100%;" onclick="draftPlayer()">Draft</button>
    </div>
  </div>
  <hr class="mt-2 mb-3">
  <div class="row">
    <div class="col-md-9">
      <table id="draft-table" class="table table-condensed table-borderless table-responsive rounded rounded-3 overflow-hidden">
        <thead style="text-align: center;">
            <tr style="border: 0.1px solid rgb(190, 190, 190);">
                <th style="font-size: 12px; width: 5%"></th>
                {{ range $pick := seq 1 (len $.Data.teams) }}
                  <th id="pick{{$pick}}" style="font-size: 12px; border: 0.1px solid rgb(190, 190, 190); width: 23.75%;">Pick {{$pick}}</th>
                {{ end }}
            </tr>
        </thead>
        <tbody style="white-space: nowrap; text-align: center; vertical-align: middle;">
          {{ range $row := seq 1 12 }}
            <tr style="border: 0.1px solid rgb(190, 190, 190); font-size: 12px;">
              <td>
                {{ $row }}
              </td>
              {{ range $col := seq 1 (len $.Data.teams) }}
              <td class="p-0" style="font-size: 14px; border-left: 0.1px solid rgb(190, 190, 190);">
                <div id="row{{$row}}col{{$col}}" class="py-1">
                  <br>
                  <br>
                </div>
              </td>
              {{ end }}
            </tr>
          {{ end }}
        </tbody>
      </table>
    </div>
    <div class="col-md-3">
      <input id="search" class="form-control mb-2" type="text" name="search" autocomplete="off" placeholder="Search...">
      <ul id="draft-players-list" class="list-group">
        {{range $index, $player := index .Data "players"}}
            <li class="list-group-item py-1 px-3" onclick="viewPlayer({{$player}})">
              <div class="d-flex justify-content-between align-items-center pointer">
                <p class="m-0"><span class="overall-text me-2" overall-color="{{$player.Overall}}">{{$player.Overall}}</span> {{$player.FirstName}} {{$player.LastName}}</p><span style="color: rgb(212, 0, 255);" onclick="console.log('clicked star')">☆</span>
              </div>
            </li>
        {{end}}
      </ul>
      <div class="d-flex justify-content-between" style="padding-top: 6px;">
        <div>
          <img class="pointer me-3" src="/static/images/buttons/volume-on.png" alt="" style="max-height: 20px; opacity: 45%;">
          {{if eq .User.AccessLevel 2}}
            <img class="pointer" src="/static/images/buttons/settings.png" alt="" style="max-height: 18px; opacity: 45%;" onclick="draftSettings();">
          {{end}}
        </div>
        <div id="status"></div>
      </div>
    </div>
  </div>
  <div class="row px-3">
    <div id="draftControls" class="col-md-9 my-3">
      <div class="d-flex flex-row justify-content-between">
          <div id="resetPlayersBtn" class="btn btn-warning" onclick="resetAllPlayers();">Reset All Teams</div>
          <div>
            <select id="draftSeconds" class="form-select">
              <option value="1">Random</option>
              <option value="15">15</option>
              <option value="30">30</option>
              <option selected value="45">45</option>
              <option value="60">60</option>
            </select>
          </div>
          <div id="generateOrderBtn" class="btn btn-success" onclick="generateOrder();">Generate Draft Order</div>
          <div id="startDraftBtn" class="btn btn-primary" onclick="startDraft();">Start Draft</div>
          <div id="stopDraftBtn" class="btn btn-danger" onclick="stopDraft();">Stop Draft</div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-9">
  
      <div class="form-group hidden">
        <label for="username">Username:</label>
        <input type="text" name="username" id="username" class="form-control" autocomplete="off" value="{{.StringMap.user}}">
      </div>

      <input type="hidden" name="action" id="action">

      <div id="output" class="form-control" style="min-height: 160px; max-height: 160px; overflow:scroll; scrollbar-width: none;">

      </div>

      <div class="form-group mt-2">
        <input type="text" name="message" id="message" class="form-control" autocomplete="off">
      </div>

    </div>
    <div class="col-md-3">
      <h3>Online</h3>
      <ul id="online_users" style="padding-left: 1em; font-size: 16px;">
        
      </ul>
    </div>
  </div>

</div>
{{end}}

{{define "js"}}

<script>
  var countdownTimer;
  let socket = null;
  let o = document.getElementById("output");
  let clock = document.getElementById("countdown");
  let userField = document.getElementById("username");
  let messageField = document.getElementById("message");
  let pick = 1;


  window.onbeforeunload = function() {
    console.log("Leaving");
    let jsonData = {};
    jsonData["action"] = "left";
    socket.send(JSON.stringify(jsonData))
  }

  document.addEventListener("DOMContentLoaded", function() {
    socket = new ReconnectingWebSocket("ws://" + document.location.host + "/ws", null, {debug: true, reconnectInterval: 3000});

    const online = `<span class="badge bg-success">Connected</span>`
    const offline = `<span class="badge bg-danger">Not connected</span>`
    let statusDiv = document.getElementById("status");

    socket.onopen = () => {
      console.log("Successfully connected");
      statusDiv.innerHTML = online;
      let jsonData = {};
      jsonData["action"] = "username";
      jsonData["username"] = userField.value;
      socket.send(JSON.stringify(jsonData));
    }

    socket.onclose = () => {
      console.log("Connection closed");
      statusDiv.innerHTML = offline;
    }

    socket.onerror = error => {
      console.log("There was an error");
      statusDiv.innerHTML = offline;
    }

    socket.onmessage = msg => {
      let data = JSON.parse(msg.data);
      console.log("Action is", data.action);

      switch (data.action) {
        case "list_users":
          let ul = document.getElementById("online_users");
          while (ul.firstChild) ul.removeChild(ul.firstChild);

          if (data.connected_users.length > 0) {
            data.connected_users.forEach(function(item) {
              let li = document.createElement("li");
              li.appendChild(document.createTextNode(item))
              ul.appendChild(li)
            })
          }
          break;

        case "broadcast":
          o.innerHTML = o.innerHTML + data.message + "<br>";
          break;

        case "reset_players":
          var elems = document.querySelectorAll("#list-tab .hidden");
          var buttons = document.querySelectorAll("#nav-tabContent .btn-dark");
          var stars = document.querySelectorAll("#list-tab i");
          elems.forEach(el => {
            el.classList.remove('hidden');
            el.classList.add('d-flex');
          });
          buttons.forEach(button => {
            button.classList.remove('btn-dark');
            button.classList.remove('disabled');
          });
          stars.forEach(star => {
            star.style.display = "inline-block"
          });
          for (let row = 1; row <= 12; row++) {
            for (let col = 1; col <= 4; col++) {
              document.getElementById("row" + row + "col" + col).innerHTML = "<br><br>";
              document.getElementById("row" + row + "col" + col).style.backgroundColor = "";
            }
          }
          break;

        case "timer":
          clock.innerHTML = data.countdown;
          document.getElementById("countdown_bar").style.width = (data.countdown/data.draft_seconds)*100 + "%";
          break;

        case "generate_order":
          for (let i = 0; i < data.teams.length; i++) {
            document.getElementById("pick" + (i+1)).innerHTML = data.teams[i].Name.toUpperCase();
            document.getElementById("pick" + (i+1)).style.backgroundImage = 'linear-gradient(90deg,' + data.teams[i].Color1 + ', ' + data.teams[i].Color2 +  ')';
            document.getElementById("pick" + (i+1)).style.color = data.teams[i].TextColor;
          } 
          break;
        
        case "draft_player":
          document.getElementById("row" + (data.row) + "col" + (data.column)).innerHTML = data.message;
          document.getElementById("row" + (data.row) + "col" + (data.column)).style.backgroundColor = data.color;
          document.getElementById("row" + (data.row) + "col" + (data.column)).style.color = "black";
          document.getElementById("player" + (data.player_id) + "-list").classList.remove("d-flex");
          document.getElementById("player" + (data.player_id) + "-list").classList.add("hidden");
          document.getElementById("draft_" + (data.player_id)).classList.add("btn-dark");
          document.getElementById("draft_" + (data.player_id)).classList.add("disabled");
          document.getElementById((data.player_id) + "-star").style.display = "none";
          pick++
          let row = Math.floor((pick - 1) / 4 + 1);
          let col;
          if (row % 2 !== 0) {
            col = Math.floor(pick - (row - 1) * 4)
          } else {
            col = Math.floor(row * 4 - pick + 1)
          }
          console.log("pick", pick)
          console.log("row", row)
          console.log("col", col)
          if (pick < 49) {
            document.getElementById("row" + row.toString() + "col" + col.toString()).innerHTML = "PICK " + pick.toString() + "<br><span class=\"fw-semibold\">" + (document.getElementById("pick" + col).innerHTML) + "</span>";
            // document.getElementById("row" + row.toString() + "col" + col.toString()).style.color = 'white';
            // document.getElementById("row" + row.toString() + "col" + col.toString()).style.backgroundColor = '#0d6efd';
          }
          break;

        case "draft_started":
          document.getElementById("row" + "1" + "col" + "1").innerHTML = "PICK " + pick.toString() + "<br><span class=\"fw-semibold\">" + (document.getElementById("pick1").innerHTML) + "</span>";
          var buttons = document.querySelectorAll("#nav-tabContent .btn-dark");
          buttons.forEach(button => {
            button.classList.remove('disabled');
            button.classList.remove('btn-dark');
            button.classList.add('btn-primary');
          });
          break;  

        case "draft_ended":
          clock.innerHTML = "<br>";
          pick = 1;
          document.getElementById("countdown_bar").style.width = "100%";
          break;
        }
    }

    userField.addEventListener("change", function () {
          let jsonData = {};
          jsonData["action"] = "username";
          jsonData["username"] = this.value;
          socket.send(JSON.stringify(jsonData));
      })

    messageField.addEventListener("keydown", function(event) {
      if (event.code === "Enter") {
        if (!socket) {
          console.log("No connection");
          return false
        }

        if ((userField.value === "") || (messageField.value === "")) {
          // errorMessage("Fill out username and message!");
          return false;
        } else {
          sendMessage();
        }

        event.preventDefault();
        event.stopPropagation();
      }
    })
  })

  function sendMessage() {
    let jsonData = {};
    jsonData["action"] = "broadcast";
    jsonData["username"] = userField.value;
    jsonData["message"] = messageField.value;
    socket.send(JSON.stringify(jsonData))
    messageField.value = "";
  }

  function generateOrder() {
    let jsonData = {};
    jsonData["action"] = "generate_order";
    socket.send(JSON.stringify(jsonData))
  }

  function startDraft() {
    let jsonData = {};
    jsonData["action"] = "start_draft";
    jsonData["countdown"] = parseInt(document.getElementById("draftSeconds").value);
    socket.send(JSON.stringify(jsonData))
  }

  function stopDraft() {
    let jsonData = {};
    jsonData["action"] = "stop_draft";
    socket.send(JSON.stringify(jsonData))
  }

  function draftPlayer() {
    // var playerInfo = [firstName, lastName, primaryPos, secondaryPos];
    
    // let jsonData = {};
    // jsonData["action"] = "draft_player";
    // jsonData["player_id"] = parseInt(playerID);
    // jsonData["player_info"] = playerInfo;
    // socket.send(JSON.stringify(jsonData))
    console.log(document.getElementById('player-id').innerText)
  }

  function resetAllPlayers() {
    let jsonData = {};
    jsonData["action"] = "reset_players";
    socket.send(JSON.stringify(jsonData))
  }

  function draftSettings() {
        const str = 'draftControls';
        $('#' + str).toggleClass("hidden");
    }

</script>

<script>
  function viewPlayer(player) {
    let img = (player.img_url) ? player.img_url : '/static/images/players/default_player.png'
    let playerInfo = `${player.primary_position}${player.secondary_position ? '/' + player.secondary_position : ''}${player.height ? ` | ${player.height}cm` : ''}${player.weight ? ` | ${player.weight}kg` : ''}`;
    document.getElementById('player-id').innerText = player.player_id
    document.getElementById('name').innerText = player.first_name + ' ' + player.last_name
    document.getElementById('name').href = '/players/' + player.player_id
    document.getElementById('player-info').innerText = playerInfo
    document.getElementById('player-img').src = img
    document.getElementById('overall').innerText = player.overall
    document.getElementById('overall').setAttribute('overall-color', player.overall)
    document.getElementById('three-point').innerText = player.attributes.ThreePointShot
    document.getElementById('driving-dunk').innerText = player.attributes.DrivingDunk
    document.getElementById('athleticism').innerText = player.attributes.Athleticism
    document.getElementById('interior-d').innerText = player.attributes.InteriorDefense
    document.getElementById('perimeter-d').innerText = player.attributes.PerimeterDefense
    document.getElementById('rebounding').innerText = player.attributes.Rebounding
    document.getElementById('bronze-badges').innerText = player.bronze_badges
    document.getElementById('silver-badges').innerText = player.silver_badges
    document.getElementById('gold-badges').innerText = player.gold_badges
    document.getElementById('hof-badges').innerText = player.hof_badges
    document.getElementById('total-badges').innerText = player.total_badges
    document.getElementById('total-attributes').innerText = player.attributes.TotalAttributes
  }
</script>

<script>
  $(document).ready(function(){
  let colorRange = {
      '91-99' :'overall1-text',
      '86-90' :'overall2-text',
      '81-85' :'overall3-text',
      '1-80'  :'overall4-text',
      '0-0'   :'overall5-text',
  };
  
  function between(value, min, max) {
      return value >= min && value <= max;
  }
  
  let color;
  let first; 
  let second;
  let overall;
  
  $('.overall-text').each(function(index){
      
      overall = $(this);
      color = parseInt($(this).attr('overall-color'),10);
      
      $.each(colorRange, function(name, value){
          
          first = parseInt(name.split('-')[0],10);
          second = parseInt(name.split('-')[1],10);
          
          if( between(color, first, second) ){
              overall.addClass(value);
          }
      
      });
      
  });
  });
</script>

// Search
<script>
  $(document).ready(function() {
    $("#search").on("keyup", function() {
      var value = $(this).val().toLowerCase()
      console.log(value)
      $("#draft-players-list li").filter(function() {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
      })
    })
  })
</script>
{{end}}