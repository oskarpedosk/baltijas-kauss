{{template "base" .}}

{{define "content"}}

<title>Players | Baltijas Kauss</title>

<div class="container">
    <div class="row">
        <div id="players_table" class="col-md-9">
            <table class="table table-sm table-responsive table-borderless table-hover" style="border-bottom: 0.5px solid rgb(190, 190, 190);">
                <thead style="font-size: 14px; white-space: nowrap; text-align: center;">
                    <tr style="background-color: white;">
                        <th>#</th>
                        <th></th>
                        <th class="ps-2 pointer sortByCol" style="text-align: start;" data-col="lname">NAME</th>
                        <th class="pointer sortByCol" title="Overall Rating" data-bs-toggle="tooltip" data-bs-placement="top" data-col="ovr" sorted="desc">OVR â†“</th>
                        <th class="pointer sortByCol" title="Three Point Shot" data-bs-toggle="tooltip" data-bs-placement="top" data-col="3pt">3PT</th>
                        <th class="pointer sortByCol" title="Driving Dunk" data-bs-toggle="tooltip" data-bs-placement="top" data-col="ddunk">DUNK</th>
                        <th class="pointer sortByCol" title="Athleticism" data-bs-toggle="tooltip" data-bs-placement="top" data-col="ath">ATHL</th>
                        <th class="pointer sortByCol" title="Perimeter Defense" data-bs-toggle="tooltip" data-bs-placement="top" data-col="perd">PER D</th>
                        <th class="pointer sortByCol" title="Interior Defense" data-bs-toggle="tooltip" data-bs-placement="top" data-col="intd">INT D</th>
                        <th class="pointer sortByCol" title="Rebounding" data-bs-toggle="tooltip" data-bs-placement="top" data-col="reb">REB</th>
                        <th class="pointer sortByCol" title="Badges" data-bs-toggle="tooltip" data-bs-placement="top" data-col="bdg">BADGES</th>
                        <th class="pointer sortByCol" title="Total Attributes" data-bs-toggle="tooltip" data-bs-placement="top" data-col="total">TOTAL</th>
                    </tr>
                </thead>
                <tbody style="white-space: nowrap; text-align: center; vertical-align: middle;">
                    {{$ranking := index .Data "ranking"}}
                    {{range $index, $player := index .Data.players}}
                    <tr class="searchable" style="border-top: 0.5px solid rgb(190, 190, 190);">
                        <td class="p-0">{{index $ranking $index}}</td>
                        <td class="p-0 ps-1 py-1">
                            <a href="/players/{{$player.Player.PlayerID}}">
                                {{ if $player.Player.ImgURL }}
                                    <img src="{{$player.Player.ImgURL}}" alt="" class="header-image rounded-circle inline-block {{if eq $player.Player.Legend 1}}legend-border{{else}}border{{end}}">
                                {{ else }}
                                    <img src="/static/images/players/default_playerrrrr.png" alt="" class="header-image rounded-circle inline-block {{if eq $player.Player.Legend 1}}legend-border{{else}}border{{end}}">
                                {{ end }}
                            </a>
                        </td>
                        <td class="p-0 ps-1">
                            <div class="d-flex player-card">
                                <div class="p-0 inline-block">
                                    <p class="m-0"><a class="player-link" {{if eq $player.Player.Legend 1}}style="color: #d300ea;"{{end}} href="/players/{{$player.Player.PlayerID}}">{{$player.Player.FirstName}} {{$player.Player.LastName}}</a>
                                    <div class="my-0">
                                        <p class="text-muted my-0 pointer" style="font-size: 12px;" data-bs-toggle="dropdown" aria-expanded="false">
                                            {{$player.Player.PrimaryPosition}}{{if $player.Player.SecondaryPosition}}/{{$player.Player.SecondaryPosition}}{{end}}
                                            | {{$player.Player.Height}}cm | <span id="player_{{$player.Player.PlayerID}}_abbreviation" style="color: {{if eq $player.Team.TextColor "#ffffff"}}black{{else}}{{$player.Team.TextColor}}{{end}};">{{$player.Team.Abbreviation}}</span>
                                        </p>
                                        <div class="dropdown-menu">
                                            {{range $team := $.Data.teams}}
                                                <li class="dropdown-item pointer" onclick="changeTeam('{{$player.Player.PlayerID}}', '{{$player.Player.FirstName}}', '{{$player.Player.LastName}}', '{{$team.TeamID}}', '{{$team.Abbreviation}}', '{{$team.TextColor}}', '{{$.CSRFToken}}')">
                                                    <span style="color: {{$team.TextColor}}">{{$team.Abbreviation}}</span> {{$team.Name}}
                                                </li>
                                            {{end}}
                                            <hr class="dropdown-divider">
                                            <li class="dropdown-item pointer" onclick="changeTeam('{{$player.Player.PlayerID}}', '{{$player.Player.FirstName}}', '{{$player.Player.LastName}}', '{{$.Data.FA.TeamID}}', '{{$.Data.FA.Abbreviation}}', '{{$.Data.FA.TextColor}}', '{{$.CSRFToken}}')">
                                                {{$.Data.FA.Name}}
                                            </li>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </td>
                        <td><span class="overall-badge" overall-color="{{$player.Player.Overall}}">{{$player.Player.Overall}}</span></td>
                        <td>{{$player.Player.Attributes.ThreePointShot}}</td>
                        <td>{{$player.Player.Attributes.DrivingDunk}}</td>
                        <td>{{$player.Player.Attributes.Athleticism}}</td>
                        <td>{{$player.Player.Attributes.PerimeterDefense}}</td>
                        <td>{{$player.Player.Attributes.InteriorDefense}}</td>
                        <td>{{$player.Player.Attributes.Rebounding}}</td>
                        <td>
                            <span class="playerbadge badge badge-pill p-1 bronze">{{$player.Player.BronzeBadges}}</span>
                            <span class="playerbadge badge badge-pill p-1 silver">{{$player.Player.SilverBadges}}</span>
                            <span class="playerbadge badge badge-pill p-1 gold">{{$player.Player.GoldBadges}}</span>
                            <span class="playerbadge badge badge-pill p-1 hof">{{$player.Player.HOFBadges}}</span>
                            <span class="playerbadge badge badge-pill p-1 total">{{$player.Player.TotalBadges}}</span>
                        </td>
                        <td>
                            <span class="playerbadge badge badge-pill p-1 text-dark bg-light border" style="background-color: rgb(237, 237, 237); width: 50px;">{{$player.Player.Attributes.TotalAttributes}}</span>
                        </td>
                    </tr>
                    {{end}}

                </tbody>
            </table>
            <div class="row">
                {{ template "pagination" .}}
            </div>
        </div>
        
        <div class="col-md-3 p-0">
            <div id="filterForm" class="bg-light p-3 rounded-3">

                <input id="search" class="form-control" type="text" name="search" autocomplete="off" placeholder="Search...">

                <div id="positionsFilter" class="my-2">
                    <div>
                        <input class="form-check-input" type="checkbox" name="p1" checked>
                        <p>PG</p>
                    </div>
                    <div>
                        <input class="form-check-input" type="checkbox" name="p2" checked>
                        <p>SG</p>
                    </div>
                    <div>
                        <input class="form-check-input" type="checkbox" name="p3" checked>
                        <p>SF</p>
                    </div>
                    <div>
                        <input class="form-check-input" type="checkbox" name="p4" checked>
                        <p>PF</p>
                    </div>
                    <div>
                        <input class="form-check-input" type="checkbox" name="p5" checked>
                        <p>C</p>
                    </div>
                </div>
                
                <div class="filter-attribute-height-weight">
                    <p>Height</p>
                    <input name="hl" type="text" class="form-control inputMin" autocomplete="off" placeholder="150cm">
                    <div></div>
                    <input name="hh" type="text" class="form-control inputMax" autocomplete="off" placeholder="250cm">
                </div>
                <div class="filter-attribute-height-weight">
                    <p>Weight</p>
                    <input name="wl" type="text" class="form-control inputMin" autocomplete="off" placeholder="50kg">
                    <div></div>
                    <input name="wh" type="text" class="form-control inputMax" autocomplete="off" placeholder="150kg">
                </div>

                <hr>

                <div class="filter-attribute">
                    <p>Overall</p>
                    <input name="ovrl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="ovrh" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>
                <div class="filter-attribute">
                    <p>Three Point Shot</p>
                    <input name="3ptl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="3pth" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>
                <div class="filter-attribute">
                    <p>Driving Dunk</p>
                    <input name="ddunkl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="ddunkh" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>
                <div class="filter-attribute">
                    <p>Athleticism</p>
                    <input name="athl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="athh" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>
                <div class="filter-attribute">
                    <p>Perimeter Defense</p>
                    <input name="perdl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="perdh" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>
                <div class="filter-attribute">
                    <p>Interior Defense</p>
                    <input name="intdl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="intdh" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>
                <div class="filter-attribute">
                    <p>Rebounding</p>
                    <input name="rebl" type="text" class="form-control inputMin" autocomplete="off" placeholder="1">
                    <div></div>
                    <input name="rebh" type="text" class="form-control inputMax" autocomplete="off" placeholder="99">
                </div>

                <select id="teamSelect" class="form-select mb-2">
                    <option value="0">All Teams</option>
                    {{range $team := $.Data.teams}}
                        <option value="{{$team.TeamID}}">{{$team.Name}}</option>
                    {{end}}
                    <option value="1">Free Agency</option>
                </select>

                <select id="limitSelect" class="form-select mb-2">
                    <option value="20">20 players</option>
                    <option value="30">30 players</option>
                    <option value="50">50 players</option>
                </select>

                <button class="btn btn-primary my-2" style="width: 100%;" onclick="filterPlayers()">Submit</button>
                <a href="/players"><button class="btn btn-light border border-dark" style="width: 100%;">Reset</button></a>
            </div>
        </div>
    </div>
</div>



{{end}}

{{define "js"}}

<script src="/static/js/pagination.js"></script>

<script>
    $(document).ready(function(){
    let colorRange = {
        '91-99' :'overall1',
        '86-90' :'overall2',
        '81-85' :'overall3',
        '1-80'  :'overall4',
        '0-0'   :'overall5',
    };
    
    function between(value, min, max) {
        return value >= min && value <= max;
    }
    
    let color;
    let first; 
    let second;
    let overall;
    
    $('.overall-badge').each(function(index){
        
        overall = $(this);
        color = parseInt($(this).attr('overall-color'),10);
        
        $.each(colorRange, function(name, value){
            
            first = parseInt(name.split('-')[0],10);
            second = parseInt(name.split('-')[1],10);
            
            if( between(color, first, second) ){
                overall.addClass(value);
            }
        
        });
        
    });
    });
</script>

<script>
    function changeTeam(playerID, firstName, lastName, teamID, abbreviation, color, csrftoken) {
        $.ajax({
        type: "POST",
        url: "/players",
        data : {
            csrf_token: csrftoken,
            action: "change_team",
            player_id: playerID,
            team_id: teamID,
        },
        success: function(response) {
            const team = document.getElementById('player_' + playerID + '_abbreviation');
            team.textContent = abbreviation;
            team.style.color = color;
            notie.alert({ type: 1, text: firstName + ' ' + lastName + ' added to ' + abbreviation});
        },
        error: function(jqXHR, textStatus, errorThrown) {
            notie.alert({ type: 3, text: 'Error adding player: ' + errorThrown});
        }
        });
    }
 </script>

<script>
    function filterPlayers() {
        let URLWithoutQueries = window.location.origin + window.location.pathname
        let url = new URL(URLWithoutQueries)
        let inputs = document.querySelectorAll('#filterForm input')
        inputs.forEach(input => {
            if (input.name === 'search' && input.value) {
                url.searchParams.set("search", (input.value).replaceAll(' ', '+'))
            } else {
                if ((!input.checked) && input.type === 'checkbox') {
                    url.searchParams.set(input.name, 0)
                } else if (input.value && input.type !== 'checkbox') {
                    url.searchParams.set(input.name, input.value)
                }
            }
        })
        let teams = document.getElementById('teamSelect')
        if (teams.value !== '0') {
            url.searchParams.set("team", teams.value)
        }
        let limit = document.getElementById('limitSelect')
        if (limit.value !== '20') {
            url.searchParams.set("limit", limit.value)
        }
        window.location.href = url.toString()
    }
</script>

<script>
    let sortByCol = document.querySelectorAll(".sortByCol");

    let currentURL = window.location.href
    let url = new URL(currentURL)

    sortByCol.forEach(function(col) {
        col.addEventListener("click", function() {

            sortByCol.forEach(function(otherCol) {
                if (otherCol !== col) {
                    otherCol.innerText = otherCol.innerText.replace(" â†“", "").replace(" â†‘", "")
                    otherCol.removeAttribute("sorted")
                }
            })

            if ((this.getAttribute("sorted") === "desc")) {
                this.innerText = this.innerText.replace(" â†“", "").replace(" â†‘", "") + " â†‘"
                this.setAttribute("sorted", "asc")
            } else if ((this.getAttribute("sorted") === "asc")) {
                this.innerText = this.innerText.replace(" â†“", "").replace(" â†‘", "") + " â†“"
                this.setAttribute("sorted", "desc")
            } else {
                this.innerText += " â†“"
                this.setAttribute("sorted", "desc")
            }
            url.searchParams.set("col", this.getAttribute("data-col"))
            url.searchParams.set("sort", this.getAttribute("sorted"))
            window.location.href = url.toString()
        })
    })
</script>


<script>
    currentURL = new URL(window.location.href);
    const searchParams = new URLSearchParams(currentURL.search)
    const inputs = document.querySelectorAll('#filterForm input')

    inputs.forEach(input => {
        if (input.type === 'checkbox') {
            input.checked = !searchParams.has(input.name)
        } else {
            if (input.name === 'search') {
                input.value = searchParams.get(input.name) ? searchParams.get(input.name).replaceAll('+', ' ') : ''
            } else {
                input.value = searchParams.get(input.name)
            }
        }
    });

    const teams = document.getElementById('teamSelect')
    if (searchParams.has('team')) {
        teams.value = searchParams.get('team')
    }

    const limit = document.getElementById('limitSelect')
    if (searchParams.has('limit')) {
        limit.value = searchParams.get('limit')
    }

    // Handle the table sorting
    sortByCol = document.querySelectorAll('.sortByCol')
    if (searchParams.has('col')) {
        sortByCol.forEach(col => {
            col.innerText = col.innerText.replace(/[â†‘â†“]/g, '')
            col.removeAttribute('sorted')

            if (col.getAttribute('data-col') === searchParams.get('col')) {
                col.innerText += searchParams.get('sort') === 'asc' ? ' â†‘' : ' â†“'
                col.setAttribute('sorted', searchParams.get('sort'))
            }
        })
    }
</script>

<script>
    const search = document.getElementById("search")
    search.addEventListener("keypress", event => {
        if (event.keyCode === 13) {
            filterPlayers()
        }
    })
</script>


{{end}}